<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on XuLizhao &#39;s Notes</title>
    <link>/categories/tech/</link>
    <description>Recent content in Tech on XuLizhao &#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 03 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>开源反向代理及负载均衡Envoy初探</title>
      <link>/blog/envoy-proxy/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/envoy-proxy/</guid>
      <description>&lt;p&gt;Envoy是Lyft于2017年开源的网络反向代理工具,现属于CNCF基金会的毕业项目.&lt;/p&gt;

&lt;p&gt;和Nginx和HAProxy相比,功能更强大,开源更彻底(提供的许多功能是其他产品的付费功能).&lt;/p&gt;

&lt;p&gt;更重要的是作为新兴代理,与微服务紧密结合,可以做入口代理/边缘代理/中间代理等. 流行的Service Mesh框架istio就是基于Envoy构建而成.&lt;/p&gt;

&lt;p&gt;Envoy本身用C++开发,并发模型与Nginx类似,具有很高的处理性能.&lt;/p&gt;

&lt;p&gt;本文尽量脱离微服务和Service Mesh,聚焦于Envoy代理本身所提供的丰富功能.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bazel构建工具</title>
      <link>/blog/bazel-build/</link>
      <pubDate>Fri, 31 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/bazel-build/</guid>
      <description>&lt;p&gt;Bazel是Google开源的一个构建系统,主要支持分布式缓存和增量编译,使得大项目的构建更快速, 主要用于C++,Java,Go等服务端项目构建.&lt;/p&gt;

&lt;p&gt;有一个与之类似的快速构建系统Buck(Facebook开源)则更关注于Android和iOS客户端的构建. 两者都倾向于mono repo(而非基于项目的仓库)的构建.&lt;/p&gt;

&lt;p&gt;之前看了眼官方教程,觉得过于复杂没有引起兴趣. 最近看到在B站代码和envoy都作为标配,所以再做些深入了解.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go依赖库管理初探</title>
      <link>/blog/go-mod/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/go-mod/</guid>
      <description>&lt;p&gt;Go作为一个新语言,其依赖管理系统一直不够完善,官方直到去年才在1.11加入modules(也叫vgo). 在此之前社区不满官方的官僚,还有过一阵激烈的讨论,讨论流行第三方库dep的不被采纳而官方自造轮子.&lt;/p&gt;

&lt;p&gt;最近在项目首次使用了modules系统,但还是采用的兼容的vendor模式. 总体用下来还不错,一些github库也已经使用该方式.&lt;/p&gt;

&lt;p&gt;下面简要列下常见用法.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go in Action 学习笔记</title>
      <link>/blog/go-in-action/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/go-in-action/</guid>
      <description>&lt;p&gt;初学Go时主要读的&amp;lt;Go语言圣经&amp;gt;,正式中文版叫&amp;lt;Go程序设计语言&amp;gt;, 由于当时写的代码还很少,实际上很多是不太懂的或后来也忘了.&lt;br /&gt;
之后想读些其他书时,本来想读的&amp;lt;Go编程实战&amp;gt;在豆瓣的评分偏低,便一直没读. 在写过一些代码后,偶然再读这本书,发现其实战意义很高,是很好的一本进阶书.&lt;br /&gt;
由此看来豆瓣的评分只能当个参考,需要读读看是不是适合自己.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Django再记录</title>
      <link>/blog/django/</link>
      <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/django/</guid>
      <description>&lt;p&gt;Django作为python web开发第一框架,很早就有所了解, 上次使用是在3年多之前. 作为全栈框架来说,是个很优秀的框架.&lt;br /&gt;
据我所知Instagram,Mozilla等高流量/大公司都在使用.&lt;br /&gt;
之前几个项目特意使用了以轻量著称的Flask,两者算是各有千秋吧.&lt;/p&gt;

&lt;p&gt;去年Django2.0推出后一直想尝试,正好最近拿来试试.&lt;br /&gt;
用下来感觉简化部署和可定制化相比之前改观很多,做下简要笔记.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用kubeadm手动搭建Kubernetes集群</title>
      <link>/blog/kubeadm/</link>
      <pubDate>Sat, 29 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/kubeadm/</guid>
      <description>&lt;p&gt;用kubespray基于Ansible自动化工具搭建集群是很方便,但是一旦遇到问题查起来经常找不到头绪,因为不知所以然.&lt;br /&gt;
所以回归本源,用官方提供的kubeadm一步步建立一个单主的集群,可以让我们更容易弄清它的部署架构.&lt;br /&gt;
这也是此文/这次实践的目的所在.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>再提镜像站的使用</title>
      <link>/blog/mirror/</link>
      <pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/mirror/</guid>
      <description>把时间花在下载软件或必须翻过去访问外部网络是让人苦恼的一件事, 镜像站能很好地解决一些问题. 最早时使用Ubuntu国内镜像加速软件更新,后来使</description>
    </item>
    
    <item>
      <title>利器之iTerm2</title>
      <link>/blog/iterm2/</link>
      <pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/iterm2/</guid>
      <description>&lt;p&gt;平时用的最多的系统是Windows10和Ubuntu,如果说苹果系统MacOS有什么让我离不开的特性的话,iTerm2绝对排第一.&lt;/p&gt;

&lt;p&gt;可这个经常使用的免费终端居然有一些我不知道的好用功能,特记录与此.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LaTeX生成PDF实践</title>
      <link>/blog/latex/</link>
      <pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/latex/</guid>
      <description>&lt;p&gt;LaTeX最广泛的用途应该是在学术领域写论文, 其实在排版(尤其公式,格式)上也胜过Word很多,绝对专业.&lt;/p&gt;

&lt;p&gt;最近为了在本地生成一个PDF,做了一些了解.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes命名空间的应用</title>
      <link>/blog/k8s-namespace/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/k8s-namespace/</guid>
      <description>&lt;p&gt;在实际应用中存在一个Kubernetes集群中多个部署环境的问题,比如存在dev,qa,stage等.&lt;/p&gt;

&lt;p&gt;如果部署在一个集群会省去不少运维成本且节省资源占用.&lt;/p&gt;

&lt;p&gt;通常这会用到命名空间的特性.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>迁移至Python3</title>
      <link>/blog/python3/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/python3/</guid>
      <description>&lt;p&gt;用过Python的都知道,他有两个互不兼容的大版本Python2和Python3,由于历史遗留问题许多生产环境或库还只支持老版本Python2.&lt;/p&gt;

&lt;p&gt;实际上2.7已经发布了近8年,且是最后一个2.x的大版本,并且将于2010(两年后)彻底停止维护,退出历史舞台.&lt;/p&gt;

&lt;p&gt;Python3在两年前及更早时的库支持和应用范围确实不太好,有选择困难症的同学都转去Go语言了:) .&lt;/p&gt;

&lt;p&gt;幸运的是近两年主流库/框架都已支持Python3,毕竟发布已经10年多了,在新项目中毫无疑问必须用Python3.&lt;/p&gt;

&lt;p&gt;之前我在两个新项目已经使用Python3,最近把一个老项目也彻底迁移过来, 这里记录下一些知识点.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计数据密集型应用笔记</title>
      <link>/blog/ddia/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/ddia/</guid>
      <description>&lt;p&gt;去年就看到总有人推荐&lt;Design Data Intensive Applications&gt;这本书(简称DDIA),最初手里只有英文版,缓慢的读了个开头后来就忙别的去了.&lt;/p&gt;

&lt;p&gt;今年偶然看到网上有&lt;a href=&#34;https://github.com/Vonng/ddia&#34;&gt;中译版&lt;/a&gt;,惭愧的是到了年底,最近几个月才读来.&lt;/p&gt;

&lt;p&gt;书的信息量很大,对数据库和分布式系统感兴趣的尤其值得一读.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自动生成SSL证书的利器acme.sh</title>
      <link>/blog/acme/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/acme/</guid>
      <description>&lt;p&gt;已经使用letsencrypt的免费证书一段时间了，是之前折腾Ghost博客时自动安装的，而后台其实也是用的acme.sh这个工具。&lt;/p&gt;

&lt;p&gt;遇到的问题是不知哪里的配置错误，我的证书自动更新有问题，每次都是遇到证书已经过期，网站彻底不能访问了，必须要手动更新。&lt;/p&gt;

&lt;p&gt;之前用的HTTP的验证方式，由于一知半解，这块每次手动配置也会花费一些时间。&lt;/p&gt;

&lt;p&gt;今天重读了&lt;a href=&#34;https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E&#34;&gt;官方文档&lt;/a&gt;，才发现有一些细节的使用，其实可以做到一劳永逸。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM和GC调优</title>
      <link>/blog/jvm/</link>
      <pubDate>Thu, 27 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/jvm/</guid>
      <description>&lt;p&gt;曾多次接触Java的GC参数调优和日志分析，零散的记录在各处，时间一长也忘的差不多了，汇总于此。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>全链路压测笔记续</title>
      <link>/blog/more-load-test-note/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/more-load-test-note/</guid>
      <description>&lt;p&gt;看完美团的分享觉得不过瘾，继续学习其他大厂的分享。&lt;/p&gt;

&lt;p&gt;不用猜，第一个搞出这套系统的一定是阿里，因为他的双11需求最迫切。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>美团全链路压测Quake学习笔记</title>
      <link>/blog/meituan-load-test-note/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/meituan-load-test-note/</guid>
      <description>&lt;p&gt;今天读了美团技术团队新发布的&lt;a href=&#34;https://tech.meituan.com/2018/09/27/quake-introduction.html&#34;&gt;全链路压测平台Quake在美团中的实践&lt;/a&gt;，做个笔记。&lt;/p&gt;

&lt;p&gt;先说下总的读后感:&lt;/p&gt;

&lt;p&gt;压力测试/性能测试有多种方式，从下面的几个发展阶段可以看出越来越追求真实高峰访问的模拟。&lt;/p&gt;

&lt;p&gt;现在大公司普遍的分布式架构，云计算的应用，容器的使用也可以提供更有力的资源调度。但全链路压测最重要的工作在于需要架构，开发团队的支持和适配工作。&lt;/p&gt;

&lt;p&gt;没有全链路的监控及相关工具支撑，没有架构的调整（压测标识）和数据库的配合（影子表），这个全链路压测就是个听起来更美的名字（你也知道技术圈喜欢造新词）。&lt;/p&gt;

&lt;p&gt;印象中APM/Application Performance Management 前几年就挺火的，现在各大厂又都在提全链路了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ubuntu日常</title>
      <link>/blog/ubuntu/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/ubuntu/</guid>
      <description>很早就接触使用Ubuntu，也是自己最钟爱的Linux系统。 给Ubuntu留一篇记录日常使用。 Ubuntu 18.04安装中文输入法 sogou拼音由于不</description>
    </item>
    
    <item>
      <title>MySQL性能优化</title>
      <link>/blog/mysql-tuning/</link>
      <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/mysql-tuning/</guid>
      <description>&lt;p&gt;关于MySQL性能问题查找及优化的点滴.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java应用的数据库迁移工具Flyway</title>
      <link>/blog/java-db-migrate/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/java-db-migrate/</guid>
      <description>&lt;p&gt;最近折腾部署一年前的一个应用,发现一些由于一些细节已经忘记,常常可能多花费几个小时去重新解决问题的过程. 而有的过程之前写过KB,关键字一搜索就出来能省不少时间.&lt;/p&gt;

&lt;p&gt;所以对于健忘的自己,还是多些记录,也不介意技术含量这个概念了.&lt;/p&gt;

&lt;p&gt;印象中flyway应该是Java生态中很成熟的一个解决方案了,简略的记下使用过程.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go并发编程笔记</title>
      <link>/blog/go-concurrency/</link>
      <pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/go-concurrency/</guid>
      <description>&lt;p&gt;最近尝试用Go重写以前Python的一个工具,感觉一直工作于Hard模式,可是又不想轻易的放弃Golang的实践,因为遇到一些问题最终变成从入门到放弃.&lt;/p&gt;

&lt;p&gt;还好一周周坚持了下来,虽然遇到一个问题可能会解决多半天甚至一天多时间,还是有所学的.&lt;/p&gt;

&lt;p&gt;今天整理下关于并发编程,也就是Go核心亮点goroutine使用中可能遇到的问题.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>开源消息队列实现</title>
      <link>/blog/mq/</link>
      <pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/mq/</guid>
      <description>&lt;p&gt;经常会遇到系统中使用Message Queue/消息队列的情况, 与此类似的模型还有 pubsub/发布订阅模式(publisher/subscriber).&lt;/p&gt;

&lt;p&gt;这两种模型的实现也被看做 消息中间件/MOM(Message-Oriented Middleware),因为这种结构解耦了发送端和接收端,简化了架构.&lt;/p&gt;

&lt;p&gt;另外常提的一个概念是Messaging Broker, 更多的用于消息验证,转换,路由.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>网络基础</title>
      <link>/blog/network/</link>
      <pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/network/</guid>
      <description>&lt;p&gt;好记性不如烂笔头, 网络基础知识备忘.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes和云原生计算</title>
      <link>/blog/cloud-native/</link>
      <pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/cloud-native/</guid>
      <description>&lt;p&gt;最早注意到云原生这个概念是某次看文章说Kubernetes是作为CNCF(云原生计算基金会)的主要项目来开发的,该基金会属于Linux基金会旗下,还包括被熟知的prometheus,istio等开源项目, 似乎可以理解为Kubernetes生态系统.&lt;/p&gt;

&lt;p&gt;至此Kubernetes把&lt;a href=&#34;/blog/microservices/&#34;&gt;微服务&lt;/a&gt;,十二要素,服务网格/Service Mesh等串联了起来, 符合这些概念的应用架构就是云原生应用.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>私有Docker仓库Harbor</title>
      <link>/blog/harbor/</link>
      <pubDate>Fri, 13 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/harbor/</guid>
      <description>提到私有容器仓库,VMWare出品的开源Harbor算是首选. 安装和配置照官方文档来很简单,今天在尝试push镜像时遇到了如下错误: &amp;ldquo;Get https://yourdomain.com/v2/: Service Unavailable&amp;rdquo;,</description>
    </item>
    
    <item>
      <title>证书那些事</title>
      <link>/blog/cert/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/cert/</guid>
      <description>&lt;p&gt;断断续续接触过加密通讯的一些场景, 随着近两年安全的普及,建站使用https也成为标配.&lt;/p&gt;

&lt;p&gt;这篇文章试图汇总下证书这块的知识提纲.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python流行库/框架汇总</title>
      <link>/blog/python-lib/</link>
      <pubDate>Wed, 04 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/python-lib/</guid>
      <description>&lt;p&gt;作为一个Python粉,一直在各种场合使用这个语言,最近也在试图从Python2彻底切换到Python3.&lt;/p&gt;

&lt;p&gt;如果说缺点的话,也只有对它的性能有所抱怨(GIL),不能使用多核CPU.&lt;/p&gt;

&lt;p&gt;这篇主要记录使用过和部分mark过的库/框架,其他检索的话可以使用awesome-python.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fabric自动化部署</title>
      <link>/blog/fabric/</link>
      <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/fabric/</guid>
      <description>&lt;p&gt;Fabric比较轻量级,平时在部署多个服务器时经常用到.&lt;/p&gt;

&lt;p&gt;今年作者发布了不向后兼容的Fabric2, 由于原有的脚本改动太多,暂时还没有迁移.&lt;/p&gt;

&lt;p&gt;[2018.12更新]&lt;br /&gt;
Fabric2现在看来是个错误选择, Fabric v1不支持Python3,而Fabric2仍存在大量bug和未实现功能,从实用的角度看v2基本不可用.&lt;br /&gt;
在主流已经使用Python3的情况下,这意味着Fabric毫无迁移必要.&lt;br /&gt;
算了不折腾了,直接上Ansible吧.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vim必知必会</title>
      <link>/blog/vim/</link>
      <pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/vim/</guid>
      <description>&lt;p&gt;VI/VIM作为Nix环境的常用编辑器,有一些常用命令/用法.&lt;/p&gt;

&lt;p&gt;由于平时用VSCode/SublimeText比较多,以至于切换到vi经常需要查阅,特记录与此.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ansible Checklist</title>
      <link>/blog/ansible/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/ansible/</guid>
      <description>&lt;p&gt;最早接触Ansible是在15年,后来断断续续用过几次,因为更倾向于所写即所得的Fabric,后者也更轻量级.&lt;/p&gt;

&lt;p&gt;每次拾起来都要查文档,记录下常见用法.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker Command</title>
      <link>/blog/docker-command/</link>
      <pubDate>Fri, 11 May 2018 10:15:55 +0000</pubDate>
      
      <guid>/blog/docker-command/</guid>
      <description>&lt;p&gt;实际使用中，docker的命令还是很多的，这里单列出来方便查询。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker最佳实践</title>
      <link>/blog/docker-best-practice/</link>
      <pubDate>Fri, 11 May 2018 10:08:13 +0000</pubDate>
      
      <guid>/blog/docker-best-practice/</guid>
      <description>这里主要针对制作Docker镜像，汇总常见的正确使用方式： 制作镜像 使用继承镜像 如果要制作包含Tomcat和Java运行环境的镜像， 建议先基于</description>
    </item>
    
    <item>
      <title>在Windows10运行增强版Ubuntu,支持复制粘贴和本地磁盘映射</title>
      <link>/blog/hyperv-ubuntu-enhanced-mode/</link>
      <pubDate>Thu, 10 May 2018 07:12:50 +0000</pubDate>
      
      <guid>/blog/hyperv-ubuntu-enhanced-mode/</guid>
      <description>使用Win10自带的Hyper-V运行Ubuntu虚拟机确实资源使用很小，Ubuntu虚拟机开个全屏，用起来和双系统没有区别。 前提 由于这是最</description>
    </item>
    
    <item>
      <title>Kubernetes控制命令kubectl汇总</title>
      <link>/blog/k8s-command/</link>
      <pubDate>Fri, 13 Apr 2018 06:43:37 +0000</pubDate>
      
      <guid>/blog/k8s-command/</guid>
      <description>kubectl 作为Kubernetes集群管理的命令行工具,经常用到的几个子命令包括: kubectl get &amp;ndash; list resources kubectl describe &amp;ndash; show detailed information about a resource kubectl logs &amp;ndash; print the logs from a container in a pod kubectl exec &amp;ndash; execute a command on</description>
    </item>
    
    <item>
      <title>Kubernetes部署篇:Kubespray方式自动化</title>
      <link>/blog/k8s-deploy/</link>
      <pubDate>Fri, 13 Apr 2018 01:27:57 +0000</pubDate>
      
      <guid>/blog/k8s-deploy/</guid>
      <description>众所周知Kubernetes集群的部署比较繁琐复杂,这里列出常见的几种部署方式及过程. 官方现在提供2种主要的部署方式: Kubespray : 基于Ansible</description>
    </item>
    
    <item>
      <title>Kubernetes部署篇:本地开发测试环境搭建</title>
      <link>/blog/k8s-local/</link>
      <pubDate>Fri, 13 Apr 2018 01:19:50 +0000</pubDate>
      
      <guid>/blog/k8s-local/</guid>
      <description>&lt;p&gt;本文侧重于入门Kubernetes时的本地开发测试环境搭建,及minikube的使用.&lt;/p&gt;

&lt;p&gt;尤其在国内使用时需要开启网络代理,否则会因为访问Google的一些服务失败而造成各种运行失败的问题.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Web测试及工具</title>
      <link>/blog/webtest/</link>
      <pubDate>Tue, 10 Apr 2018 07:02:21 +0000</pubDate>
      
      <guid>/blog/webtest/</guid>
      <description>&lt;p&gt;整理下测试相关的东西在这里。&lt;/p&gt;

&lt;p&gt;说到Web网页自动化测试，事实上的唯一标准就是基于WebDriver/Selenium的实现了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;说明: WebDriver 等同于Selenium2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;webdriver-介绍&#34;&gt;WebDriver 介绍&lt;/h2&gt;

&lt;p&gt;WebDriver 是一个跨浏览器的网站自动化测试API，主要包含以下几方面&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Browser Control： navigation, snapshotting, window control, override geolocation&lt;/li&gt;
&lt;li&gt;User input simulation： mouse, keyborad, file uploads, altert handling&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Web stuff： find/query elements, evaluate JavaScript, manipulate cookies&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>接口测试及工具</title>
      <link>/blog/apitest/</link>
      <pubDate>Tue, 10 Apr 2018 03:26:58 +0000</pubDate>
      
      <guid>/blog/apitest/</guid>
      <description>接口（API）测试随着REST的流行有个越来越多的应用，而基于测试金字塔理论，偏底层的接口测试是投入产出最高的。 接口测试基本操作： 生成符合协</description>
    </item>
    
    <item>
      <title>用Makefile简化重复的多个命令</title>
      <link>/blog/makefile/</link>
      <pubDate>Sun, 08 Apr 2018 10:03:00 +0000</pubDate>
      
      <guid>/blog/makefile/</guid>
      <description>经常会通过编译安装一些Linux包,最熟悉的就是make test, make install 这类命令了,以为make只适用于编译安装. 实际上发现Makefile/make</description>
    </item>
    
    <item>
      <title>用Jupyter/iPython Notebook做笔记</title>
      <link>/blog/jupyter-ipython-notebook/</link>
      <pubDate>Tue, 03 Apr 2018 08:17:30 +0000</pubDate>
      
      <guid>/blog/jupyter-ipython-notebook/</guid>
      <description>ipython作为一个必备的学习/调试环境, notebook可以看做其增强版, 支持Markdown格式说明, 很适合用笔记或者演示/培训用途,</description>
    </item>
    
    <item>
      <title>你的网站账号密码安全吗</title>
      <link>/blog/check-your-password/</link>
      <pubDate>Tue, 03 Apr 2018 03:32:33 +0000</pubDate>
      
      <guid>/blog/check-your-password/</guid>
      <description>&lt;p&gt;今天看了Django开发者的一篇&lt;a href=&#34;https://www.b-list.org/weblog/2018/mar/06/two-new-projects/&#34;&gt;文章&lt;/a&gt;,关于web安全的子项目, 其中提到了一个用于检测用户密码是否安全的API.&lt;/p&gt;

&lt;p&gt;不同于普通的密码强度检测,它的检测原理基于最近这些年大型的互联网公司数据库泄漏事件,比如CSDN,天涯,HiAPK安卓网,网易等.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux Bash笔记</title>
      <link>/blog/linux-bash/</link>
      <pubDate>Tue, 27 Mar 2018 07:16:47 +0000</pubDate>
      
      <guid>/blog/linux-bash/</guid>
      <description>&lt;p&gt;这里主要记录Linux系统的默认shell Bash用法.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux文件查找/内容搜索命令</title>
      <link>/blog/linux-search/</link>
      <pubDate>Tue, 27 Mar 2018 06:42:45 +0000</pubDate>
      
      <guid>/blog/linux-search/</guid>
      <description>&lt;p&gt;Linux的文件检索或者日志文件关键字搜索应该是很常用的工作场景, 这里汇总常见的命令用法.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pytest测试框架</title>
      <link>/blog/pytest/</link>
      <pubDate>Wed, 21 Mar 2018 03:38:22 +0000</pubDate>
      
      <guid>/blog/pytest/</guid>
      <description>&lt;p&gt;单元测试最初流行是从JUnit,而他的发明者Kent Beck大神的经典名作&amp;lt;测试驱动开发&amp;gt;这本小书却引领了TDD的风潮,产生了xUnit各个语言系列.&lt;/p&gt;

&lt;p&gt;初次接触pytest,感觉不像个xUnit,因为既看不到对TestCase的继承,也找不到Setup/Teardown这些建立/销毁函数.当然这些基本功能肯定是支持的.&lt;/p&gt;

&lt;p&gt;pytest虽然作为一个Python单元测试框架的扩展版, 但是它丰富的功能和灵活的特性也很适合做功能测试, 其中的精华就是fixtures.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux系统命令</title>
      <link>/blog/linux-system-command/</link>
      <pubDate>Tue, 13 Mar 2018 03:09:29 +0000</pubDate>
      
      <guid>/blog/linux-system-command/</guid>
      <description>&lt;p&gt;Linux系統命令, 完成一些常見任務.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux调优</title>
      <link>/blog/linux-tuning/</link>
      <pubDate>Fri, 09 Mar 2018 09:17:28 +0000</pubDate>
      
      <guid>/blog/linux-tuning/</guid>
      <description>&lt;p&gt;Linux作为服务器针对使用场景, 有许多需要调优的地方, 本文记录常用优化项.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx调优</title>
      <link>/blog/nginx-tuning/</link>
      <pubDate>Fri, 09 Mar 2018 09:17:27 +0000</pubDate>
      
      <guid>/blog/nginx-tuning/</guid>
      <description>&lt;p&gt;Nginx在部署服务时经常被用到, 大多时候是作为代理使用. 如果用户量比较大就涉及到一些调优, 本文做一些分类记录.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>分布式系统的那些论文及开源实现</title>
      <link>/blog/distributed-paper/</link>
      <pubDate>Sun, 11 Feb 2018 10:04:41 +0000</pubDate>
      
      <guid>/blog/distributed-paper/</guid>
      <description>&lt;p&gt;近几年总能看到大数据,云计算这些buzz word/时髦词, 可是说来惭愧,对近10来年历史上那些著名论文及主要内容却知道的很少.&lt;/p&gt;

&lt;p&gt;之前零散的看到分布式系统的一些文章,接下来总结下主要内容,也打算读几本书系统的学习下.&lt;/p&gt;

&lt;p&gt;今天先看看这些经典论文及衍生的开源系统.&lt;/p&gt;

&lt;p&gt;按时间顺序/影响力最大的应该就是谷歌的老三篇了,即 GFS + MapReduce + BigTable.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NodeJS及前端开发</title>
      <link>/blog/nodejs-and-frontend/</link>
      <pubDate>Mon, 05 Feb 2018 02:19:15 +0000</pubDate>
      
      <guid>/blog/nodejs-and-frontend/</guid>
      <description>&lt;p&gt;因为最近使用的两个博客系统都是基于NodeJS开发的,也顺便谈谈我理解的JavaScript及前端开发.&lt;/p&gt;

&lt;p&gt;NodeJS的是伴随Chrome的V8 Engine而出现,由于JS群众基础及高性能而快速发展,本质是它使用类似Nginx的事件循环模型可以处理极高的并发请求.异步IO及基于NodeJS的第三方库都提供的异步版本,使得较简单的编程模型带来极高的性能, JavaScipt这一应用于前端开发的古老语言焕发出新的生机.&lt;/p&gt;

&lt;p&gt;早期前端开发的JavaScript由于要处理浏览器版本兼容且语言本身问题,充斥着丑陋的代码. 伴随着JQuery及第三方框架/库的流行,JavaScript也变得优美起来.&lt;/p&gt;

&lt;p&gt;前端开发三剑客: HTML + CSS + JavaScript这些年随着新标准的发展也比我最初接触时强大易用多了, 一切事物还真得以发展的眼光看待,技术领域尤其容不得偏见.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux调试命令/工具</title>
      <link>/blog/linux-debug-command/</link>
      <pubDate>Sun, 14 Jan 2018 09:59:48 +0000</pubDate>
      
      <guid>/blog/linux-debug-command/</guid>
      <description>&lt;p&gt;Linux的强大之一是丰富的命令系统,尤其在调试服务端应用时.&lt;/p&gt;

&lt;p&gt;记录在这里方便查阅.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>/blog/redis/</link>
      <pubDate>Fri, 12 Jan 2018 02:33:44 +0000</pubDate>
      
      <guid>/blog/redis/</guid>
      <description>&lt;p&gt;最流行的内存数据库,Redis可以理解为Remote Dictionary Service.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>/blog/mysql/</link>
      <pubDate>Thu, 11 Jan 2018 09:31:35 +0000</pubDate>
      
      <guid>/blog/mysql/</guid>
      <description>&lt;p&gt;最流行的开源关系型数据库,常用的MySQL版本为社区版或Percona版.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL</title>
      <link>/blog/postgresql/</link>
      <pubDate>Thu, 11 Jan 2018 09:30:37 +0000</pubDate>
      
      <guid>/blog/postgresql/</guid>
      <description>&lt;p&gt;PostgreSQL是2017年流行度上升最快的数据库.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;吐槽:官方的管理工具pgAdmin真难用啊, 命令也没有MySQL易记.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux防火墙</title>
      <link>/blog/linux-firewall/</link>
      <pubDate>Thu, 11 Jan 2018 08:38:35 +0000</pubDate>
      
      <guid>/blog/linux-firewall/</guid>
      <description>&lt;p&gt;CentOS作为一个开发环境用还是有些繁琐了,今天因为忘了iptables防火墙默认开启,还浪费了些时间找原因.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tomcat</title>
      <link>/blog/tomcat/</link>
      <pubDate>Fri, 05 Jan 2018 02:08:09 +0000</pubDate>
      
      <guid>/blog/tomcat/</guid>
      <description>&lt;p&gt;Tomcat是最常用的Java部署容器，在我最初接触Java时就是主流，特点就是稳定.&lt;/p&gt;

&lt;p&gt;与之类似还有个Jetty，用的不多就不涉及了.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>网络分析工具</title>
      <link>/blog/network-tools/</link>
      <pubDate>Wed, 03 Jan 2018 08:06:32 +0000</pubDate>
      
      <guid>/blog/network-tools/</guid>
      <description>&lt;p&gt;这里的网络分析工具可以归为两大类:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;网络代理: 用的最多的是 Fiddler&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;分析工具: 比较熟悉的是Wireshark&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊聊监控系统</title>
      <link>/blog/monitoring/</link>
      <pubDate>Fri, 29 Dec 2017 02:47:29 +0000</pubDate>
      
      <guid>/blog/monitoring/</guid>
      <description>&lt;p&gt;2017很快就要过去了,也顺便整理下散落在印象笔记的一些片段.&lt;/p&gt;

&lt;p&gt;监控系统本来是运维的一个重要组成,因为工作需要也接触了一些开源的监控系统, 下面简要的聊聊我所知道的.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>微服务</title>
      <link>/blog/microservices/</link>
      <pubDate>Thu, 28 Dec 2017 07:38:18 +0000</pubDate>
      
      <guid>/blog/microservices/</guid>
      <description>&lt;p&gt;微服务是最近两年流行起来的一种架构设计方法,可以很好的和Docker,Kubernetes结合起来.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利器之ZSH</title>
      <link>/blog/zsh/</link>
      <pubDate>Thu, 28 Dec 2017 02:19:17 +0000</pubDate>
      
      <guid>/blog/zsh/</guid>
      <description>&lt;p&gt;有些工具真的很能提高效率, 比如oh-my-zsh这个扩展(zsh本身比bash更强大).&lt;/p&gt;

&lt;p&gt;纵观软件世界,一个软件系统能流行起来很大原因是其生态是不是够丰富和繁荣,比如容器docker,Spring框架.&lt;/p&gt;

&lt;p&gt;oh-my-zsh提供了丰富的插件及主题,是我的装机必备. 在这里记录下常用设置.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go语言学习笔记</title>
      <link>/blog/golang/</link>
      <pubDate>Tue, 26 Dec 2017 07:00:40 +0000</pubDate>
      
      <guid>/blog/golang/</guid>
      <description>&lt;p&gt;接触Go有段时间了，感觉有几个学习资源很有帮助：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;官方Go指南 : 边写边学, 最轻松简单的方式&lt;/li&gt;
&lt;li&gt;系统的学习: 推荐书 &lt;Go程序设计语言&gt;， 我是先看的&lt;a href=&#34;https://xulizhao.com/docs/gopl&#34;&gt;中文电子版&lt;/a&gt;之后买的实体书。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;官方文档&amp;rdquo;Effective Go/实效Go编程&amp;rdquo; : 理解Go的必读文档&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go网络开发笔记</title>
      <link>/blog/go-networking/</link>
      <pubDate>Tue, 26 Dec 2017 03:33:27 +0000</pubDate>
      
      <guid>/blog/go-networking/</guid>
      <description>&lt;p&gt;用Go开发网络很常见,由于对系统库还不是很熟,做下简单的笔记.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IntelliJ IDE</title>
      <link>/blog/intellij-ide/</link>
      <pubDate>Wed, 20 Dec 2017 07:28:00 +0000</pubDate>
      
      <guid>/blog/intellij-ide/</guid>
      <description>&lt;p&gt;接触最早最多的IDE是Eclipse,当时一有大版本我就下载更新,却总感觉变化不大.&lt;/p&gt;

&lt;p&gt;后来时不时有人安利IntelliJ,我试用后体会不深,再说商业版很贵(早期没有社区版),没有继续使用.&lt;/p&gt;

&lt;p&gt;做Python开发后,慢慢从Eclipse+PyDev逐渐切换到PyCharm,感觉这才是IDE的样子,也就是足够智能.&lt;/p&gt;

&lt;p&gt;之后越来越喜欢全家桶,IDEA,DataGrip,GoLand, 毕竟操作习惯了,而且我每次安装完必须给界面换成Darcula的黑色主题.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go开发遇到的坑</title>
      <link>/blog/go-fix-it/</link>
      <pubDate>Wed, 20 Dec 2017 06:49:56 +0000</pubDate>
      
      <guid>/blog/go-fix-it/</guid>
      <description>&lt;p&gt;由于之前主要用的是Python这类动态语言,切换到Go还有些不适应.&lt;/p&gt;

&lt;p&gt;这些出错信息看的一头雾水,记下来供参考.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>/blog/kubernetes/</link>
      <pubDate>Mon, 18 Dec 2017 02:38:06 +0000</pubDate>
      
      <guid>/blog/kubernetes/</guid>
      <description>&lt;p&gt;Kubernetes(缩写为k8s)是最流行的开源容器管理平台, 现在也是事实上的容器编排调度标准.&lt;/p&gt;

&lt;p&gt;打算写系列的相关文章,记录自己的学习过程.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://xulizhao.com/blog/k8s-local&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes部署篇:本地开发测试环境搭建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://xulizhao.com/blog/k8s-deploy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes部署篇:Kubespray方式自动化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://xulizhao.com/blog/kubeadm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;用kubeadm手动搭建Kubernetes集群&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://xulizhao.com/blog/k8s-command&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kubectl命令汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://xulizhao.com/blog/k8s-namespace&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes命名空间的应用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker基础</title>
      <link>/blog/docker/</link>
      <pubDate>Mon, 18 Dec 2017 02:37:23 +0000</pubDate>
      
      <guid>/blog/docker/</guid>
      <description>&lt;p&gt;最近两年随着微服务而流行起来的Docker是一种轻量级容器技术(相对于VMWare,KVM等Hypervisor解决方案).&lt;/p&gt;

&lt;p&gt;它能给开发,测试,运维各团队提供一个统一的运行环境, 这点很实用.&lt;/p&gt;

&lt;p&gt;Docker可以看做在内核容器技术(Cgroup和Namespace)的基础上提供更高级功能的控制工具,主要特性:&lt;/p&gt;

&lt;p&gt;(1)跨主机部署(2)以应用为中心 (3)自动构建 (4)版本管理 (5)组建重用 (6)共享 (7)工具生态链&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利器之TMUX</title>
      <link>/blog/tmux/</link>
      <pubDate>Mon, 18 Dec 2017 02:21:35 +0000</pubDate>
      
      <guid>/blog/tmux/</guid>
      <description>用法 tmux ls : list sessions tmux attach -t 0 : -t 代表“target” , 0 是session名 tmux kill-session -t 0 : 结束会话 tmux source ~/.tmux.conf : 重新加载配置 复制和粘贴: 使用Shift临时禁用</description>
    </item>
    
    <item>
      <title>Go流行库简介</title>
      <link>/blog/go-lib/</link>
      <pubDate>Fri, 15 Dec 2017 08:44:11 +0000</pubDate>
      
      <guid>/blog/go-lib/</guid>
      <description>&lt;p&gt;Go作为最近几年随大数据,Docker而火热起来(依然偏小众)的服务端语言,最近接触下来的感觉是第三方库/框架还是不够稳定和丰富,很多应用场景还没有一个绝对地位的首选库.&lt;/p&gt;

&lt;p&gt;偶尔发现&lt;a href=&#34;https://go.libhunt.com/&#34;&gt;LibHunt&lt;/a&gt;还不错,可以在库选型时做些对比.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SSH使用及扩展</title>
      <link>/blog/ssh/</link>
      <pubDate>Fri, 15 Dec 2017 06:19:55 +0000</pubDate>
      
      <guid>/blog/ssh/</guid>
      <description>&lt;p&gt;经常和Linux服务器打交道就离不开SSH.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx</title>
      <link>/blog/nginx/</link>
      <pubDate>Wed, 13 Dec 2017 10:45:49 +0000</pubDate>
      
      <guid>/blog/nginx/</guid>
      <description>时常会用到Nginx,一直没有好好的梳理下,以后更新在这里. 基础使用 安装 照官方教程来就好,没啥好说的. # CentOS中 $releasever</description>
    </item>
    
    <item>
      <title>Python配置备忘</title>
      <link>/blog/python/</link>
      <pubDate>Wed, 13 Dec 2017 07:58:35 +0000</pubDate>
      
      <guid>/blog/python/</guid>
      <description>&lt;p&gt;Python开发环境问题记录.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jenkins持续集成工具</title>
      <link>/blog/jenkins/</link>
      <pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/jenkins/</guid>
      <description>时不时会和持续集成工具Jenkins打交道. Python API调用 无认证 import requests api_url = &amp;#34;http://jenkins.xulizhao.com/job/test_job/api/json?tree=lastSuccessfulBuild[number]&amp;#34; r = requests.get(api_url) build_number = r.json()[&amp;#39;lastSuccessfulBuild&amp;#39;][&amp;#39;number&amp;#39;] 需要认证 # 先安装依赖库 pip install python-jenkins # 代码示例 import jenkins server = jenkins.Jenkins(&amp;#39;http://jenkins.xulizhao.com&amp;#39;, username=&amp;#39;user&amp;#39;, password=&amp;#39;password&amp;#39;) last_build_number =</description>
    </item>
    
    <item>
      <title>Golang开发环境</title>
      <link>/blog/go-basic/</link>
      <pubDate>Tue, 28 Nov 2017 10:14:35 +0000</pubDate>
      
      <guid>/blog/go-basic/</guid>
      <description>&lt;p&gt;简单记录下Go语言开发环境的搭建和基本用法.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git备忘</title>
      <link>/blog/git/</link>
      <pubDate>Mon, 27 Nov 2017 07:20:47 +0000</pubDate>
      
      <guid>/blog/git/</guid>
      <description>&lt;h1 id=&#34;学习资源&#34;&gt;学习资源&lt;/h1&gt;

&lt;p&gt;如果是新手,强烈推荐阅读&lt;a href=&#34;http://rogerdudler.github.io/git-guide/index.zh.html&#34;&gt;Git简明教程&lt;/a&gt;, 进阶必读 &lt;a href=&#34;https://git-scm.com/book/zh&#34;&gt;Pro Git中文版&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;git常用命令&#34;&gt;Git常用命令&lt;/h1&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flask开发笔记</title>
      <link>/blog/flask/</link>
      <pubDate>Thu, 19 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/flask/</guid>
      <description>开发基础 创建 Flask Starter Project pip3 install cookiecutter cookiecutter https://github.com/realpython/cookiecutter-flask-skeleton.git 具体使用参考 项目地址 常用第三方 # requirements.txt Flask Flask-Bcrypt Flask-Login Flask-WTF Flask-Bootstrap Flask-DebugToolbar Flask-Testing Flask-Migrate Flask-SQLAlchemy celery 例子 # -- coding: utf-8 -- from flask import Flask, request, make_response, redirect, abort app = Flask(__name__) # route建立请求路</description>
    </item>
    
    <item>
      <title>ZooKeeper</title>
      <link>/blog/zookeeper/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/zookeeper/</guid>
      <description>作用及原理 作用: 分布式协调, 提供操作API 配置管理 集群管理: 群主选举 资源定位 同步状态 统一命名服务 使用案例: HBase Hadoop Kafka 选举算法 一个Leader,其</description>
    </item>
    
  </channel>
</rss>